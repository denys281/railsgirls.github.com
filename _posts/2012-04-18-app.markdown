---
layout: default
title: Rails Teens App Tutorial
permalink: app
---
# Rails Teens App Tutorial

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**Переконайся, що rails встановлено.** Як це зробити, може прочитати [**тут**](/install)

## Дізнайся про засоби
<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Редактори тексту

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  [Vim](http://www.vim.org/) та [Emacs](https://www.gnu.org/software/emacs/) - приклади редакторів тексту, в яких ти можеш писати і редагувати код.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Термінал (або командний рядок в Windows)
* Місце, де ми запскатимемо сервер і виконуватимемо системні команди.
* Пошукай серед інстальованих програм, ввівши "Термінал" чи "Командний рядок"

<h3><i class="icon-browser">&nbsp;</i></h3>

### Веб переглядачі
* (Firefox, Safari, Chrome) для перегдяду застосунку.

В цій інструкціїї ти побачиш багато коду, що позначається так:
{% highlight sh %}
Привіт, Світ!
{% endhighlight %}

<div>
<p> Це означає, що виділений текст - це програмний код, його варто виконати чи додати до своїх файлів. Зображення обіля виділеного тексту допоможе тобі знати, який засіб використати.</p>
<p> Наприклад, якщо ти бачиш зображення терміналу біля виділеного тексту, як в прикладі вище, то варто ввести цей код у термінал чи командний рядок.</p> 
</div>


### Важливо!

Валивою, щоб ти вибрав інструкції, що призначені для операційної системи, яку ти використовуєш: команди, які призначені для Windows дещо відрізняються від тих, які призначені для Mac  чи Linux. Якщо маєш проблеми - перевір перемикач операційних систем внизу команд. Якщо ти використовуєш хмарне оточення (наприклад, Codenvy), тобі потрібно запускати команди, що призначені для Linux, навіть, якщо у тебе комп'ютер із Windows.

## *1.*Створення застосунку

Створимо новий застосунок Rails  із назвою *railsteens*

Спершу відкриємо териінал:
* Mac OS X: Відкрий Spotlight, набери *Terminal* і клікни на програму *Terminal*.
* Windows: Клікни Start і пошукай *Командний рядок*, потім клікни на *Командний рядок з Ruby and Rails*.
* Linux (Ubuntu/Fedora): Пошукай  *Термінал* в даші і клікни на *Термінал*.
* Хмарний сервіс (як-от, Codenvy): Увійди в свій акаунт, почни свій проект і переключись на IDE (за деталями дивись [інструкцію по встановленні](/install#using-a-cloud-service)). Термінал зазвичай знаходиться унизу вікна переглядача.

Тепер введи ці команди в термінал:

<div class="os-specific">
  <div class="nix">
    {% highlight sh %}
        mkdir projects
    {% endhighlight %}

    <div>
        <p>You can verify that a directory named <code>projects</code> was created by running the list command: <code>ls</code>. You should see the <code>projects</code> directory in the output. Now you want to change the directory you are currently in to the <code>projects</code> folder by running:</p>
    </div>

    {% highlight sh %}
        cd projects
    {% endhighlight %}

    <div>
        <p>You can verify you are now in an empty directory or folder by again running the <code>ls</code> command. Now you want to create a new app called <code>railsgirls</code> by running:</p>
    </div>

    {% highlight sh %}
        rails new railsgirls
    {% endhighlight %}

    <div>
        <p>This will create a new app in the folder <code>railsgirls</code>, so we again want to change the directory to be inside of our rails app by running:</p>
    </div>

    {% highlight sh %}
        cd railsgirls
    {% endhighlight %}

    <div>
        <p>If you run <code>ls</code> inside of the directory you should see folders such as <code>app</code> and <code>config</code>. You can then start the rails server by running:</p>
    </div>

    {% highlight sh %}
        rails server
    {% endhighlight %}
  </div>

  <div class="win">
    {% highlight sh %}
        mkdir projects
    {% endhighlight %}

    <div>
        <p>You can verify that a directory named <code>projects</code> was created by running the list command: <code>dir</code>. You should see the <code>projects</code> directory in the output. Now you want to change the directory you are currently in to the <code>projects</code> folder by running:</p>
    </div>

    {% highlight sh %}
        cd projects
    {% endhighlight %}

    <div>
        <p>You can verify you are now in an empty directory or folder by again running the <code>dir</code> command. Now you want to create a new app called <code>railsgirls</code> by running:</p>
    </div>

    {% highlight sh %}
        rails new railsgirls
    {% endhighlight %}

    <div>
        <p>This will create a new app in the folder <code>railsgirls</code>, so we again want to change the directory to be inside of our rails app by running:</p>
    </div>

    {% highlight sh %}
        cd railsgirls
    {% endhighlight %}

    <div>
        <p>If you run <code>dir</code> inside of the directory you should see folders such as <code>app</code> and <code>config</code>. You can then start the rails server by running:</p>
    </div>

    {% highlight sh %}
        rails server
    {% endhighlight %}
  </div>
</div>

Open <http://localhost:3000> in your browser. If you are using a cloud service (e.g. Codenvy), use its preview functionality instead (see [installation guide](/install#using-a-cloud-service) for details).

You should see a page with the Rails logo and the heading "Yay! You’re on Rails!", which means that your Rails app is up and running.

Notice in this window the command prompt is not visible because you are now in the Rails server, the command prompt looks like this:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

**Tip:** Sometimes, both in this guide and other guides online, you will see commands written with the `$` symbol at the start. This is a convention that signifies the beginning of a line that needs to be entered into your Terminal / Command Prompt.
You do not need to type this symbol at the start of your commands. Your particular prompt may not have a `$` symbol at the start of it.

When the command prompt is not visible you cannot execute new commands. If you try running `cd` or another command it will not work. To return to the normal command prompt:

Hit <kbd>Ctrl</kbd>+<kbd>C</kbd> in the terminal to quit the server.

**Coach:** Explain what each command does. What was generated? What does the server do?


## *2.*Create Idea scaffold

We're going to use Rails' scaffold functionality to generate a starting point that allows us to list, add, remove, edit, and view things; in our case ideas.

**Coach:** What is Rails scaffolding? (Explain the command, the model name and related database table, naming conventions, attributes and types, etc.) What are migrations and why do you need them?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

The scaffold creates new files in your project directory, but to get it to work properly we need to run a couple of other commands to update our database and restart the server.

{% highlight sh %}
rails db:migrate
rails server
{% endhighlight %}

Open <http://localhost:3000/ideas> in your browser. Cloud service (e.g. Codenvy) users need to append '/ideas' to their preview url instead (see [installation guide](/install#using-a-cloud-service)).

Click around and test what you got by running these few command-line commands.

## *3.*Design

**Coach:** Talk about the relationship between HTML and Rails. What part of views is HTML and what is Embedded Ruby (ERB)? What is MVC and how does this relate to it? (Models and controllers are responsible for generating the HTML views.)

The app doesn't look very nice yet. Let's do something about that. We'll use the Twitter Bootstrap project to give us nicer styling really easily.

Open `app/views/layouts/application.html.erb` in your text editor and above the line

{% highlight erb %}
<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
{% endhighlight %}

add

{% highlight erb %}
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.css">
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.css">
{% endhighlight %}

and replace

{% highlight erb %}
<%= yield %>
{% endhighlight %}

with

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Let's also add a navigation bar and footer to the layout. In the same file, under `<body>` add

{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">The Idea app</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

and before `</body>` add

{% highlight erb %}
<footer>
  <div class="container">
    Rails Girls <%= Time.now.year %>
  </div>
</footer>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.js"></script>
{% endhighlight %}

Now let's also change the styling of the ideas table. Open `app/assets/stylesheets/application.css` and at the bottom add

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
{% endhighlight %}

Now make sure you saved your files and refresh the browser to see what was changed. You can also change the HTML & CSS further.

**Coach:** Talk a little about CSS and layouts.


## *4.*Adding picture uploads

We need to install a piece of software to let us upload files in Rails.

Open `Gemfile` in the project directory using your text editor and under the line

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

add

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Coach:** Explain what libraries are and why they are useful. Describe what open source software is.

Hit <kbd>Ctrl</kbd>+<kbd>C</kbd> in the terminal to quit the server.

In the terminal run:

{% highlight sh %}
bundle
{% endhighlight %}

Now we can generate the code for handling uploads. In the terminal run:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

Please start the rails server now.

Note: Some people might be using a second terminal to run the rails server continuously.
If so you need to **restart the Rails server process** now.
This is needed for the app to load the added library.

If an error is shown that the uploader cannot be found also add the following line:
{% highlight ruby %}
gem 'net-ssh'
{% endhighlight %}

If you added this gem, please run in your terminal again:

{% highlight sh %}
bundle
{% endhighlight %}

Open `app/models/idea.rb` and under the line

{% highlight ruby %}
class Idea < ApplicationRecord
{% endhighlight %}

add

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Open `app/views/ideas/_form.html.erb` and change

{% highlight erb %}
<%= form.text_field :picture, id: :idea_picture  %>
{% endhighlight %}

to

{% highlight erb %}
<%= form.file_field :picture, id: :idea_picture %>
{% endhighlight %}

In your browser, add new idea with a picture. When you upload a picture it doesn't look nice because it only shows a path to the file, so let's fix that.

Open `app/views/ideas/show.html.erb` and change

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

to

{% highlight erb %}
<%= image_tag(@idea.picture_url, width: 600) if @idea.picture.present? %>
{% endhighlight %}

Now refresh your browser to see what changed.

**Coach:** Talk a little about HTML.


## *5.*Finetune the routes

Open <http://localhost:3000> (or your preview url, if you are using a cloud service). It still shows the "Yay! You’re on Rails!" page. Let's make it redirect to the ideas page.

Open `config/routes.rb` and after the first line add

{% highlight ruby %}
root to: redirect('/ideas')
{% endhighlight %}

Test the change by opening the root path (that is, <http://localhost:3000/> or your preview url) in your browser.

**Coach:** Talk about routes, and include details on the order of routes and their relation to static files.

## Create static page in your app

Lets add a static page to our app that will hold information about the author of this application — you!

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

This command will create you a new folder under `app/views` called `/pages` and under that a file called `info.html.erb` which will be your info page.

It also adds a new simple route to your routes.rb.

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Now you can open the file `app/views/pages/info.html.erb` and add information about you in HTML. To see your new info page, take your browser to <http://localhost:3000/pages/info> or, if you are a cloud service user, append '/pages/info' to your preview url.

## *6+.*What next?

* Add design using HTML &amp; CSS
* Add ratings
* Use CoffeeScript (or JavaScript) to add interaction
* Add picture resizing to make loading the pictures faster


## Additional Guides

* Guide 0: [Handy cheatsheet for Ruby, Rails, console etc.](http://www.pragtob.info/rails-beginner-cheatsheet/)
* Guide 1: [Add commenting by Janika Liiv](/commenting)
* Guide 2: [Put your app online with Heroku by Terence Lee](/heroku) / [Put your app online with OpenShift by Katie Miller](/openshift) / [Put your app online with anynines](/anynines) / [Put your app online with Trucker.io](/trucker)
* Guide 3: [Create thumbnail images for the uploads by Miha Filej](/thumbnails)
* Guide 4: [Add design using HTML &amp; CSS by Alex Liao](/design)
* Guide 5: [Add Authentication (user accounts) with Devise by Piotr Steininger](/devise)
* Guide 6: [Adding profile pictures with Gravatar](/gravatar)
* Guide 7: [Test your app with RSpec](/testing-rspec)
* Guide 8: [Continuous Deployment with Travis-CI](/continuous-travis) / [Continuous Deployment with Codeship](/continuous) / [Continuous Deployment with Snap CI](/continuous-snap-ci)
* Guide 9: [Go through additional explanations for the App by Lucy Bain](https://github.com/lbain/railsgirls)
* Guide 10: [Adding a back-end with Active Admin](/backend-with-active-admin)
